
Debounce_and_FSMmorse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000328  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b0  080004b0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b0  080004b0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080004b0  080004b0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b0  080004b0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080004b0  080004b0  000104b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080004b8  080004b8  000104b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080004c0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000008  080004c8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080004c8  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cce  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001b7  00000000  00000000  00020d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000068  00000000  00000000  00020ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000050  00000000  00000000  00020f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c351  00000000  00000000  00020f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000005a1  00000000  00000000  0003d2c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e56a  00000000  00000000  0003d86a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbdd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f8  00000000  00000000  000dbe50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000498 	.word	0x08000498

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08000498 	.word	0x08000498

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	; (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <EXTI15_10_IRQHandler>:
	}
	EXTI->PR1 = 0x2000;
}
*/
void EXTI15_10_IRQHandler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
	if(EXTI->PR1 & (1 << 13)) {
 800025e:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <EXTI15_10_IRQHandler+0x60>)
 8000260:	695b      	ldr	r3, [r3, #20]
 8000262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000266:	2b00      	cmp	r3, #0
 8000268:	d01b      	beq.n	80002a2 <EXTI15_10_IRQHandler+0x4a>
		uint16_t Read=GPIOC->IDR;  //asigna el valor de ese registro
 800026a:	4b14      	ldr	r3, [pc, #80]	; (80002bc <EXTI15_10_IRQHandler+0x64>)
 800026c:	691b      	ldr	r3, [r3, #16]
 800026e:	80fb      	strh	r3, [r7, #6]
		Read &= (1<<13);   //limpia bits excepto los que se necesitan
 8000270:	88fb      	ldrh	r3, [r7, #6]
 8000272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000276:	80fb      	strh	r3, [r7, #6]
		if(Read== 0x2000 && state ){
 8000278:	88fb      	ldrh	r3, [r7, #6]
 800027a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800027e:	d10f      	bne.n	80002a0 <EXTI15_10_IRQHandler+0x48>
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <EXTI15_10_IRQHandler+0x68>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d00b      	beq.n	80002a0 <EXTI15_10_IRQHandler+0x48>
				TIM2->CR1 |= (1<<0);   //Enciende timmer
 8000288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6013      	str	r3, [r2, #0]
				state=false;
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <EXTI15_10_IRQHandler+0x68>)
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
 800029e:	e000      	b.n	80002a2 <EXTI15_10_IRQHandler+0x4a>
		}

		    else{
		    	__NOP();
 80002a0:	bf00      	nop
		   }
	   }
	EXTI->PR1=0x2000;
 80002a2:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <EXTI15_10_IRQHandler+0x60>)
 80002a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002a8:	615a      	str	r2, [r3, #20]
  }
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40010400 	.word	0x40010400
 80002bc:	48000800 	.word	0x48000800
 80002c0:	20000000 	.word	0x20000000

080002c4 <TIM2_IRQHandler>:




void TIM2_IRQHandler(void){
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0

	    // clear interrupt status
	if (TIM2->DIER & 0x01) {
 80002ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d00e      	beq.n	80002f6 <TIM2_IRQHandler+0x32>
	      if (TIM2->SR & 0x01) {
 80002d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002dc:	691b      	ldr	r3, [r3, #16]
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d007      	beq.n	80002f6 <TIM2_IRQHandler+0x32>
	           TIM2->SR &= ~(1U << 0);
 80002e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f0:	f023 0301 	bic.w	r3, r3, #1
 80002f4:	6113      	str	r3, [r2, #16]
	        }
	  }

	  uint16_t Read=GPIOC->IDR;
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <TIM2_IRQHandler+0x78>)
 80002f8:	691b      	ldr	r3, [r3, #16]
 80002fa:	80fb      	strh	r3, [r7, #6]
	  Read &= (1 << 13);
 80002fc:	88fb      	ldrh	r3, [r7, #6]
 80002fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000302:	80fb      	strh	r3, [r7, #6]
	  if(Read==(1 << 13)){
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800030a:	d111      	bne.n	8000330 <TIM2_IRQHandler+0x6c>
	  	  GPIOA->ODR ^= (uint16_t)(1 << 5); //encienda o apague led
 800030c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000316:	f083 0320 	eor.w	r3, r3, #32
 800031a:	6153      	str	r3, [r2, #20]
	  	  state=true;
 800031c:	4b08      	ldr	r3, [pc, #32]	; (8000340 <TIM2_IRQHandler+0x7c>)
 800031e:	2201      	movs	r2, #1
 8000320:	701a      	strb	r2, [r3, #0]
	  	  TIM2->CR1 &=0;   //Apaga timmer
 8000322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]

	  }
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	48000800 	.word	0x48000800
 8000340:	20000000 	.word	0x20000000

08000344 <main>:

/*************************************************
* Main
*************************************************/
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	RCC->AHB2ENR = 0x5;
 8000348:	4b27      	ldr	r3, [pc, #156]	; (80003e8 <main+0xa4>)
 800034a:	2205      	movs	r2, #5
 800034c:	64da      	str	r2, [r3, #76]	; 0x4c

	GPIOA->MODER &= 0xFFFFF7FF;
 800034e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000358:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800035c:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= 0xF3FFFFFF;
 800035e:	4b23      	ldr	r3, [pc, #140]	; (80003ec <main+0xa8>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <main+0xa8>)
 8000364:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000368:	6013      	str	r3, [r2, #0]

    RCC->APB1ENR1 |= (1 << 0);
 800036a:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <main+0xa4>)
 800036c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800036e:	4a1e      	ldr	r2, [pc, #120]	; (80003e8 <main+0xa4>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6593      	str	r3, [r2, #88]	; 0x58
    	// fCK_PSC / (PSC[15:0] + 1)
    	// 4 MHz / n + 1 =  timer clock speed
    TIM2->PSC = 40000; //TIM Clock 2kHz
 8000376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037a:	f649 4240 	movw	r2, #40000	; 0x9c40
 800037e:	629a      	str	r2, [r3, #40]	; 0x28
    	// set total count
    TIM2->ARR =1 ;
 8000380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000384:	2201      	movs	r2, #1
 8000386:	62da      	str	r2, [r3, #44]	; 0x2c
    	// Update Interrupt Enable
    TIM2->DIER |= (1 << 0);
 8000388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	60d3      	str	r3, [r2, #12]
    	   // enable TIM2 clock
    NVIC_SetPriority(TIM2_IRQn, 2); // Priority level 2
 8000398:	2102      	movs	r1, #2
 800039a:	201c      	movs	r0, #28
 800039c:	f7ff ff32 	bl	8000204 <__NVIC_SetPriority>
    	// enable TIM2 IRQ from NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 80003a0:	201c      	movs	r0, #28
 80003a2:	f7ff ff11 	bl	80001c8 <__NVIC_EnableIRQ>



	RCC->APB2ENR |= 0x00000001;
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <main+0xa4>)
 80003a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003aa:	4a0f      	ldr	r2, [pc, #60]	; (80003e8 <main+0xa4>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6613      	str	r3, [r2, #96]	; 0x60
	SYSCFG->EXTICR[3] |= 0x20;
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <main+0xac>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <main+0xac>)
 80003b8:	f043 0320 	orr.w	r3, r3, #32
 80003bc:	6153      	str	r3, [r2, #20]
	EXTI->IMR1 |= 0x2000;
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <main+0xb0>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a0c      	ldr	r2, [pc, #48]	; (80003f4 <main+0xb0>)
 80003c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003c8:	6013      	str	r3, [r2, #0]
	EXTI->RTSR1 |= 0x2000;
 80003ca:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <main+0xb0>)
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	4a09      	ldr	r2, [pc, #36]	; (80003f4 <main+0xb0>)
 80003d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003d4:	6093      	str	r3, [r2, #8]
	NVIC->IP[EXTI15_10_IRQn] = 0x10;
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <main+0xb4>)
 80003d8:	2210      	movs	r2, #16
 80003da:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003de:	2028      	movs	r0, #40	; 0x28
 80003e0:	f7ff fef2 	bl	80001c8 <__NVIC_EnableIRQ>



	*/

	while(1)
 80003e4:	e7fe      	b.n	80003e4 <main+0xa0>
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000
 80003ec:	48000800 	.word	0x48000800
 80003f0:	40010000 	.word	0x40010000
 80003f4:	40010400 	.word	0x40010400
 80003f8:	e000e100 	.word	0xe000e100

080003fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003fc:	480d      	ldr	r0, [pc, #52]	; (8000434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000400:	480d      	ldr	r0, [pc, #52]	; (8000438 <LoopForever+0x6>)
  ldr r1, =_edata
 8000402:	490e      	ldr	r1, [pc, #56]	; (800043c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000404:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <LoopForever+0xe>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000408:	e002      	b.n	8000410 <LoopCopyDataInit>

0800040a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800040c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040e:	3304      	adds	r3, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000414:	d3f9      	bcc.n	800040a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000416:	4a0b      	ldr	r2, [pc, #44]	; (8000444 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000418:	4c0b      	ldr	r4, [pc, #44]	; (8000448 <LoopForever+0x16>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800041c:	e001      	b.n	8000422 <LoopFillZerobss>

0800041e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000420:	3204      	adds	r2, #4

08000422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000424:	d3fb      	bcc.n	800041e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000426:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800042a:	f000 f811 	bl	8000450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042e:	f7ff ff89 	bl	8000344 <main>

08000432 <LoopForever>:

LoopForever:
    b LoopForever
 8000432:	e7fe      	b.n	8000432 <LoopForever>
  ldr   r0, =_estack
 8000434:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800043c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000440:	080004c0 	.word	0x080004c0
  ldr r2, =_sbss
 8000444:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000448:	20000028 	.word	0x20000028

0800044c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800044c:	e7fe      	b.n	800044c <ADC1_2_IRQHandler>
	...

08000450 <__libc_init_array>:
 8000450:	b570      	push	{r4, r5, r6, lr}
 8000452:	4e0d      	ldr	r6, [pc, #52]	; (8000488 <__libc_init_array+0x38>)
 8000454:	4c0d      	ldr	r4, [pc, #52]	; (800048c <__libc_init_array+0x3c>)
 8000456:	1ba4      	subs	r4, r4, r6
 8000458:	10a4      	asrs	r4, r4, #2
 800045a:	2500      	movs	r5, #0
 800045c:	42a5      	cmp	r5, r4
 800045e:	d109      	bne.n	8000474 <__libc_init_array+0x24>
 8000460:	4e0b      	ldr	r6, [pc, #44]	; (8000490 <__libc_init_array+0x40>)
 8000462:	4c0c      	ldr	r4, [pc, #48]	; (8000494 <__libc_init_array+0x44>)
 8000464:	f000 f818 	bl	8000498 <_init>
 8000468:	1ba4      	subs	r4, r4, r6
 800046a:	10a4      	asrs	r4, r4, #2
 800046c:	2500      	movs	r5, #0
 800046e:	42a5      	cmp	r5, r4
 8000470:	d105      	bne.n	800047e <__libc_init_array+0x2e>
 8000472:	bd70      	pop	{r4, r5, r6, pc}
 8000474:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000478:	4798      	blx	r3
 800047a:	3501      	adds	r5, #1
 800047c:	e7ee      	b.n	800045c <__libc_init_array+0xc>
 800047e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000482:	4798      	blx	r3
 8000484:	3501      	adds	r5, #1
 8000486:	e7f2      	b.n	800046e <__libc_init_array+0x1e>
 8000488:	080004b0 	.word	0x080004b0
 800048c:	080004b0 	.word	0x080004b0
 8000490:	080004b0 	.word	0x080004b0
 8000494:	080004b4 	.word	0x080004b4

08000498 <_init>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	bf00      	nop
 800049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049e:	bc08      	pop	{r3}
 80004a0:	469e      	mov	lr, r3
 80004a2:	4770      	bx	lr

080004a4 <_fini>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr
